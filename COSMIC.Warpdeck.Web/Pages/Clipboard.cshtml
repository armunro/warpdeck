@page
@model COSMIC.Warpdeck.Web.Pages.Clipboard

@{
    Layout = null;
}

<!DOCTYPE html>

<html class="h-100">
<head>
    <title></title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <link href="/vendor/boostrap-5.1.3/css/bootstrap.min.css" rel="stylesheet"/>
    <script src="/vendor/boostrap-5.1.3/js/popper.min.js" crossorigin="anonymous"></script>
    <script src="/vendor/boostrap-5.1.3/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
</head>
<body class="h-100 bg-dark">
<script type="importmap">
  {
    "imports": {
      "vue": "https://unpkg.com/vue@3/dist/vue.esm-browser.js"
    }
  }
</script>

<div id="clipboardApp">
    <table class="table table-dark table-striped">
        <tr>
            <th style="width: 60%">Clip</th>
            <th class="" style="width: 40%">Actions</th>
        </tr>
        <tr v-for="clip in clips">
            <td class="">
                <code>{{clip.text}}</code>
            </td>
            <td class="">
                <button class="btn btn-sm, btn-primary" @@click="triggerAction(suggestion.actionName, suggestion.actionParameters)" v-for="suggestion in clip.suggestions">{{suggestion.actionName}}<br /></button>
            </td>
        </tr>
    </table>
</div>

<script>
  const { createApp, ref } = Vue
  let app = createApp({
  
      data() {
          return {
              clips: [{text: ''}]
          };
      },
      methods: {
          loadClips() {
             fetch('http://localhost:4300/api/clipboard').then(value => {return value.json()}).then(value => this.clips = value)
          },
          triggerAction(actionTypeName, parametersString) {
              fetch('http://localhost:4300/api/action/test/trigger', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                      'type': actionTypeName,
                      'parameters': JSON.parse(parametersString)
                      
                  })
              }).then(response => console.log(response) )
          }
      },
      mounted() {
          setInterval(() => this.loadClips(), 2000);
          setTimeout(() => {    this.loadClips()}, 20);
      },
     
  }).mount("#clipboardApp");
  window.app = app;
</script>
</body>
</html>